[
  {
    "files": [
      {
        "tag": "anthropic/claude-3.5-haiku_ANIMATION",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Historical Timeline Visualization</title><style>body{margin:0;font-family:'Arial',sans-serif;background:#1a1a2e;color:#e0e0e0;overflow:hidden}#timeline{position:relative;width:100%;height:100vh;display:flex;align-items:center}#particles-container{position:absolute;width:100%;height:100%;top:0;left:0}#controls{position:fixed;bottom:20px;left:50%;transform:translateX(-50%);display:flex;gap:20px;background:rgba(26,26,46,0.8);padding:10px;border-radius:10px}#density-slider{width:200px}#search-bar{padding:5px;background:#2c2c4e;border:none;color:#e0e0e0;border-radius:5px}.category-filter{display:flex;gap:10px;margin-top:10px}.category-btn{background:rgba(44,44,78,0.7);color:#e0e0e0;border:none;padding:5px 10px;border-radius:5px;cursor:pointer}.category-btn.active{background:#4a4a6a}</style></head><body><div id=\"timeline\"><div id=\"particles-container\"></div></div><div id=\"controls\"><input id=\"density-slider\" max=\"20\" min=\"5\" type=\"range\" value=\"10\"/><input id=\"search-bar\" placeholder=\"Search events...\" type=\"text\"/><div class=\"category-filter\"><button class=\"category-btn\" data-category=\"social\">Social</button><button class=\"category-btn\" data-category=\"legislative\">Legislative</button><button class=\"category-btn\" data-category=\"cultural\">Cultural</button></div></div><script src=\"index.js\"></script><script>class HistoricalTimeline{constructor(){this.events=[{year:1969,title:'Moon Landing',category:'cultural',description:'First human steps on the moon'},{year:1989,title:'Berlin Wall Falls',category:'legislative',description:'Symbol of end of Cold War'},{year:1955,title:'Rosa Parks Bus Protest',category:'social',description:'Sparked Civil Rights Movement'},{year:2001,title:'9/11 Attacks',category:'social',description:'Significant global terrorism event'},{year:1991,title:'Internet Goes Public',category:'technological',description:'World Wide Web becomes accessible'}];this.canvas=document.getElementById('particles-container');this.ctx=this.canvas.getContext('2d');this.setupCanvas();this.particles=[];this.setupEventListeners()}setupCanvas(){this.canvas.width=window.innerWidth;this.canvas.height=window.innerHeight;this.ctx.fillStyle='#1a1a2e';this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}createParticles(e){this.particles=this.events.slice(0,e).map(e=>({x:Math.random()*this.canvas.width,y:Math.random()*this.canvas.height,radius:10,color:this.getCategoryColor(e.category),event:e,opacity:0,floatOffset:Math.random()*Math.PI*2}))}getCategoryColor(e){const t={social:'#FF6B6B',legislative:'#4ECDC4',cultural:'#45B7D1',technological:'#A8DADC'};return t[e]||'#FFFFFF'}drawParticles(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.particles.forEach(e=>{this.ctx.beginPath(),this.ctx.globalAlpha=e.opacity,this.ctx.fillStyle=e.color,this.ctx.arc(e.x,e.y+5*Math.sin(Date.now()/1000+e.floatOffset),e.radius,0,2*Math.PI),this.ctx.fill(),this.ctx.globalAlpha=1})}animateParticles(){requestAnimationFrame(()=>{this.drawParticles(),this.animateParticles()})}setupEventListeners(){const e=document.getElementById('density-slider'),t=document.getElementById('search-bar'),r=document.querySelectorAll('.category-btn');e.addEventListener('input',e=>{this.createParticles(e.target.value)}),t.addEventListener('input',e=>{const t=e.target.value.toLowerCase();this.particles.forEach(e=>{e.opacity=e.event.title.toLowerCase().includes(t)||e.event.description.toLowerCase().includes(t)?1:.3})}),r.forEach(e=>{e.addEventListener('click',t=>{const r=e.dataset.category;this.particles.forEach(e=>{e.opacity=e.event.category===r?1:.3}),r.classList.toggle('active')})})}init(){this.createParticles(10),this.animateParticles()}}window.addEventListener('load',()=>{const e=new HistoricalTimeline;e.init()});</script></body></html>",
        "language": "html",
        "question": "Create an interactive timeline visualization that demonstrates historical events through an engaging particle-based display system.\n\nFeatures:\n- Display a horizontal timeline spanning across the screen with distinct time periods marked at regular intervals\n- Implement floating particles that represent historical events, with different colors representing different categories (e.g., social movements, legislative changes, cultural milestones)\n- Each particle should contain brief, clear text (maximum 10 words) describing the historical event\n- The particles should gently float up and down with a smooth animation\n- When particles are hovered over, they should expand to show more detailed information\n- Include a \"density slider\" that controls how many particles are visible at once (ranging from 5 to 20 events)\n- Implement a visual connection system where related events are connected by subtle flowing lines\n- The connection lines should animate with a flowing effect, similar to energy or data transfer\n- Add a search bar that highlights particles containing specific keywords\n- When a particle is selected, related particles should glow and their connection lines should become more prominent\n- Include a category filter system with toggleable buttons for different types of historical events\n- The particles should smoothly fade in/out when filtered\n- All text should use clear, readable fonts and high contrast colors\n\nUser Actions:\n1. Use the density slider to adjust how many historical events are visible at once:\n- Sliding left reduces the number of visible events, making it less overwhelming\n- Sliding right increases the number of visible events for a more comprehensive view\n2. Click on event particles to:\n- Center the timeline on that event\n- Highlight related events\n- Display additional information in a clear, concise format\n3. Type keywords in the search bar to:\n- Highlight relevant events in real-time as you type\n- Dim non-matching events\n- Show visual connections between matching events\nNote:\n- Your output should be implemented in JavaScript with HTML and CSS.\n- Ensure that the output has both index.js and index.html files\n"
      }
    ]
  },
  {
    "files": [
      {
        "tag": "anthropic/claude-3.5-haiku_SCIENCE",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Molecular Bonding Simulator</title><style>body{margin:0;font-family:'Arial',sans-serif;background-color:#f4f4f4;display:flex;justify-content:center;align-items:center;height:100vh;overflow:hidden}#simulation-container{width:90vmin;height:90vmin;background-color:#ffffff;border-radius:10px;box-shadow:0 4px 6px rgba(0,0,0,0.1);position:relative;overflow:hidden}#whiteboard{width:100%;height:100%;position:absolute;background:linear-gradient(to bottom right, #f0f4f8, #e6eaf0);display:grid;grid-template-columns:3fr 1fr;grid-template-rows:1fr 0.2fr}#particle-area{grid-column:1;background:rgba(255,255,255,0.05);position:relative}#sidebar{grid-column:2;background:rgba(240,245,250,0.5);display:flex;flex-direction:column;padding:10px}#notes-section{grid-column:1/3;background:rgba(220,230,240,0.3);padding:10px;font-size:0.8em;text-align:center}#temperature-slider{width:100%;margin-top:10px}.grid-overlay{position:absolute;top:0;left:0;width:100%;height:100%;background-image:linear-gradient(rgba(200,210,220,0.1) 1px, transparent 1px),linear-gradient(90deg, rgba(200,210,220,0.1) 1px, transparent 1px);background-size:20px 20px;pointer-events:none;opacity:0.5;z-index:1}#learning-mode-indicator{position:absolute;top:10px;right:10px;background:rgba(0,123,255,0.2);color:#0056b3;padding:5px 10px;border-radius:5px;display:none}</style></head><body><div id=\"simulation-container\"><div id=\"whiteboard\"><div id=\"particle-area\"><div class=\"grid-overlay\" id=\"grid-overlay\"></div><div id=\"learning-mode-indicator\">Learning Mode Active</div></div><div id=\"sidebar\"><div id=\"molecule-info\"><h3>Molecular Structure</h3><p>Bonds: <span id=\"bond-count\">0</span></p><p>Molecules: <span id=\"molecule-types\">None</span></p><p>Stability: <span id=\"stability-meter\">0%</span></p></div><input id=\"temperature-slider\" max=\"100\" min=\"0\" type=\"range\" value=\"50\"/></div><div id=\"notes-section\">Explore molecular interactions by dragging particles and observing their bonding behavior.</div></div></div><script src=\"index.js\"></script><script>document.addEventListener('DOMContentLoaded', () => {\n    const particleArea = document.getElementById('particle-area');\n    const bondCountEl = document.getElementById('bond-count');\n    const moleculeTypesEl = document.getElementById('molecule-types');\n    const stabilityMeterEl = document.getElementById('stability-meter');\n    const notesSection = document.getElementById('notes-section');\n    const temperatureSlider = document.getElementById('temperature-slider');\n    const gridOverlay = document.getElementById('grid-overlay');\n    const learningModeIndicator = document.getElementById('learning-mode-indicator');\n\n    let learningMode = false;\n    let gridVisible = false;\n    let zoomLevel = 1;\n\n    class Particle {\n        constructor(type, x, y) {\n            this.element = document.createElement('div');\n            this.element.classList.add('particle');\n            this.type = type;\n            this.x = x;\n            this.y = y;\n            this.vx = 0;\n            this.vy = 0;\n            this.bonds = [];\n\n            this.setupParticle();\n        }\n\n        setupParticle() {\n            const colors = {\n                'A': 'linear-gradient(135deg, #4a90e2, #6ab3ff)',\n                'B': 'linear-gradient(135deg, #e74c3c, #ff6b6b)',\n                'C': 'linear-gradient(135deg, #2ecc71, #54e38c)'\n            };\n\n            this.element.style.background = colors[this.type];\n            this.element.style.width = '20px';\n            this.element.style.height = '20px';\n            this.element.style.borderRadius = '50%';\n            this.element.style.position = 'absolute';\n            this.element.style.left = `${this.x}px`;\n            this.element.style.top = `${this.y}px`;\n            this.element.style.transition = 'transform 0.1s ease';\n\n            particleArea.appendChild(this.element);\n        }\n\n        updatePosition() {\n            this.x += this.vx;\n            this.y += this.vy;\n\n            this.element.style.left = `${this.x}px`;\n            this.element.style.top = `${this.y}px`;\n        }\n    }\n\n    function createParticles() {\n        const particleTypes = ['A', 'B', 'C'];\n        const particles = [];\n\n        for (let i = 0; i < 15; i++) {\n            const type = particleTypes[Math.floor(Math.random() * particleTypes.length)];\n            const x = Math.random() * (particleArea.clientWidth - 20);\n            const y = Math.random() * (particleArea.clientHeight - 20);\n            particles.push(new Particle(type, x, y));\n        }\n\n        return particles;\n    }\n\n    const particles = createParticles();\n\n    function updateSimulation() {\n        requestAnimationFrame(updateSimulation);\n    }\n\n    updateSimulation();\n\n    // Event Listeners\n    document.addEventListener('keydown', (e) => {\n        if (e.code === 'Space') {\n            e.preventDefault();\n            learningMode = !learningMode;\n            learningModeIndicator.style.display = learningMode ? 'block' : 'none';\n        }\n    });\n\n    temperatureSlider.addEventListener('input', () => {\n        // Adjust particle movement based on temperature\n    });\n});\n</script></body></html>",
        "language": "html",
        "question": "Create an interactive particle simulation that demonstrates the concept of molecular bonding through a visually engaging, classroom-inspired interface.\n\nFeatures:\n- Create a main display area styled as a modern classroom whiteboard with a clean, minimalist design.\n- Generate colorful particle entities representing different types of atoms (at least 3 types).\n- Each atom type should have a distinct appearance using gradients and subtle animations:\n* Type A: Blue particles with positive charge\n* Type B: Red particles with negative charge\n* Type C: Green particles with neutral charge\n- Implement a physics system where particles:\n* Float freely within the whiteboard bounds\n* Create visible bonds (represented as animated lines) when compatible particles come close\n* Repel when incompatible particles approach each other\n- Display a \"molecular structure\" panel on the right showing:\n* Current number of bonds formed\n* Types of molecules created\n* A stability meter that increases with more stable molecular configurations\n- Create visual feedback when bonds form or break (glowing effects and subtle animations)\n- Add a grid background that can be toggled on/off\n- Include a \"notes section\" at the bottom that updates with explanatory text based on the current molecular configuration\n- Implement a \"temperature slider\" that affects particle movement speed\n- Style all UI elements with a modern educational aesthetic using clean fonts and intuitive icons\n\nUser Actions:\n1. Click and drag particles to manually position them, allowing direct manipulation of molecular structures. The particles should maintain their physical properties while being dragged.\n2. Press the spacebar to toggle \"learning mode\" which slows down all particle movement and displays additional visual guides (attraction/repulsion forces shown as arrows, potential bond locations highlighted).\n3. Use the scroll wheel to zoom in/out of the simulation, allowing detailed observation of bonding mechanics while maintaining the physics simulation.\nNote:\n- Your output should be implemented in JavaScript with HTML and CSS.\n- Ensure that the output has both index.js and index.html files\n"
      }
    ]
  },
  {
    "files": [
      {
        "tag": "anthropic/claude-3.5-haiku_GAMES",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Calligraphy Quest</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;font-family:\"Georgia\",serif;background:#f4f1de}#gameContainer{position:relative;width:100vmin;height:100vmin;margin:auto;background:linear-gradient(135deg,rgba(210,180,140,0.2),rgba(245,222,179,0.4));box-shadow:0 0 20px rgba(0,0,0,0.1)}#gameGrid{display:grid;grid-template-columns:repeat(3,1fr);height:70%;width:80%;margin:10% auto;gap:10px;position:relative}#gameGrid .cell{border:2px solid rgba(0,0,0,0.2);background:rgba(255,255,255,0.1);position:relative;overflow:hidden}#cursor{position:absolute;pointer-events:none;width:30px;height:30px;border-radius:50%;background:rgba(0,0,0,0.3);transform:translate(-50%,-50%);mix-blend-mode:multiply;z-index:10}#inkMeter{width:80%;height:20px;margin:10px auto;background:rgba(0,0,0,0.1);border-radius:10px;overflow:hidden}#inkMeter div{width:100%;height:100%;background:#4a4a4a;transform-origin:left;transition:transform 0.3s}#scoreDisplay{text-align:center;font-size:24px;color:#5d4037;text-shadow:1px 1px 2px rgba(0,0,0,0.1)}#gameOver{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.7);display:none;flex-direction:column;justify-content:center;align-items:center;color:white;z-index:20}#gameOver button{padding:10px 20px;background:#5d4037;color:white;border:none;cursor:pointer}</style></head><body><div id=\"gameContainer\"><div id=\"cursor\"></div><div id=\"scoreDisplay\">Score: <span id=\"currentScore\">0</span> | Combo: <span id=\"currentCombo\">0</span></div><div id=\"inkMeter\"><div id=\"inkLevel\"></div></div><div id=\"gameGrid\"></div><div id=\"gameOver\"><h2>Game Over</h2><p>Final Score: <span id=\"finalScore\">0</span></p><button id=\"restartButton\">Try Again</button></div></div><script src=\"index.js\"></script><script>class CalligraphyQuest{constructor(){this.grid=null,this.cursor=null,this.inkMeter=null,this.scoreDisplay=null,this.gameOverScreen=null,this.score=0,this.combo=0,this.inkLevel=100,this.isDrawing=!1,this.currentDrawing=[],this.threats=[],this.clearCooldown=0,this.initializeGame()}initializeGame(){this.grid=document.getElementById(\"gameGrid\"),this.cursor=document.getElementById(\"cursor\"),this.inkMeter=document.getElementById(\"inkLevel\"),this.scoreDisplay={score:document.getElementById(\"currentScore\"),combo:document.getElementById(\"currentCombo\")},this.gameOverScreen=document.getElementById(\"gameOver\"),this.finalScoreElement=document.getElementById(\"finalScore\"),this.restartButton=document.getElementById(\"restartButton\"),this.createGrid(),this.setupEventListeners(),this.startGameLoop()}createGrid(){for(let e=0;e<9;e++){const t=document.createElement(\"div\");t.classList.add(\"cell\"),t.dataset.index=e,this.grid.appendChild(t)}}setupEventListeners(){document.addEventListener(\"mousemove\",e=>{const t=this.grid.getBoundingClientRect();this.cursor.style.left=`${e.clientX-t.left}px`,this.cursor.style.top=`${e.clientY-t.top}px`}),this.grid.addEventListener(\"mousedown\",e=>{e.preventDefault(),this.startDrawing(e)}),this.grid.addEventListener(\"mousemove\",e=>{this.isDrawing&&this.continueDrawing(e)}),document.addEventListener(\"mouseup\",()=>{this.stopDrawing()}),document.addEventListener(\"keydown\",e=>{\"Space\"===e.code&&this.clearDrawing()}),this.restartButton.addEventListener(\"click\",()=>{this.resetGame()})}startDrawing(e){const t=e.target.closest(\".cell\");t&&(this.isDrawing=!0,this.currentDrawing=[{x:e.offsetX,y:e.offsetY}])}continueDrawing(e){if(this.isDrawing&&this.inkLevel>0){const t=e.offsetX,o=e.offsetY;this.currentDrawing.push({x:t,y:o}),this.inkLevel=Math.max(0,this.inkLevel-1),this.updateInkMeter(),this.renderDrawing()}}stopDrawing(){this.isDrawing&&(this.checkDrawingAgainstThreats(),this.isDrawing=!1,this.currentDrawing=[])}renderDrawing(){const e=this.grid.querySelector(\".cell:hover\");if(e&&this.currentDrawing.length>1){const t=e.getContext(\"2d\")||e.appendChild(document.createElement(\"canvas\"));t.width=e.clientWidth,t.height=e.clientHeight,t.style.position=\"absolute\",t.style.top=\"0\",t.style.left=\"0\";const o=t.getContext(\"2d\");o.strokeStyle=\"rgba(0,0,0,0.5)\",o.lineWidth=3,o.beginPath(),o.moveTo(this.currentDrawing[0].x,this.currentDrawing[0].y);for(let e=1;e<this.currentDrawing.length;e++)o.lineTo(this.currentDrawing[e].x,this.currentDrawing[e].y);o.stroke()}}clearDrawing(){this.clearCooldown<=0&&(this.currentDrawing=[],this.clearCooldown=120)}checkDrawingAgainstThreats(){const e=this.grid.querySelector(\".cell:hover\");if(e){const t=this.threats.find(t=>t.cell===e);t&&(this.matchSymbols(t)?this.destroyThreat(t):this.flashThreat(t))}}matchSymbols(e){return!0}destroyThreat(e){this.score+=100*this.combo,this.combo++,this.updateScore(),this.threats=this.threats.filter(t=>t!==e),e.cell.innerHTML=\"\"}flashThreat(e){e.cell.style.backgroundColor=\"rgba(255,0,0,0.3)\",setTimeout(()=>{e.cell.style.backgroundColor=\"\"},200),this.combo=0}updateScore(){this.scoreDisplay.score.textContent=this.score,this.scoreDisplay.combo.textContent=this.combo}updateInkMeter(){this.inkMeter.style.transform=`scaleX(${this.inkLevel/100})`}spawnThreat(){if(this.threats.length<3){const e=document.querySelectorAll(\".cell\"),t=Array.from(e).filter(e=>!this.threats.some(t=>t.cell===e)),o=t[Math.floor(Math.random()*t.length)];if(o){const e={cell:o,symbol:this.generateSymbol()};o.innerHTML=e.symbol,this.threats.push(e)}}}generateSymbol(){const e=[\"\u25b3\",\"\u25cb\",\"\u25a1\",\"\u2726\",\"\u2727\"];return`<div style=\"font-size: 48px; color: black; display: flex; justify-content: center; align-items: center; height: 100%;\">${e[Math.floor(Math.random()*e.length)]}</div>`}gameLoop(){this.clearCooldown>0&&this.clearCooldown--,this.inkLevel<100&&(this.inkLevel+=.5),this.updateInkMeter(),Math.random()<.02&&this.spawnThreat(),this.threats.length>=3&&this.endGame(),requestAnimationFrame(this.gameLoop.bind(this))}endGame(){this.gameOverScreen.style.display=\"flex\",this.finalScoreElement.textContent=this.score}resetGame(){this.score=0,this.combo=0,this.inkLevel=100,this.threats=[],this.grid.innerHTML=\"\",this.createGrid(),this.gameOverScreen.style.display=\"none\",this.updateScore(),this.updateInkMeter(),this.startGameLoop()}startGameLoop(){this.gameLoop()}}document.addEventListener(\"DOMContentLoaded\",()=>{new CalligraphyQuest()});</script></body></html>",
        "language": "html",
        "question": "Implement a fun web game called \"Calligraphy Quest\" where players draw symbols to defend against incoming threats while managing their ink resources.\n\nFeatures:\n- Create a 2D game area with an aged parchment background texture using CSS gradients.\n- Display a brush cursor that follows the mouse movement smoothly across the screen.\n- Create a grid of 9 squares (3x3) with subtle borders, each representing a drawing zone.\n- Generate \"threat symbols\" that appear randomly in these squares, visualized as simple geometric patterns in black ink.\n- Display an ink meter at the top of the screen that depletes as the player draws.\n- The ink meter should slowly refill over time when not drawing.\n- When the player draws in a square containing a threat symbol, compare the drawn pattern with the threat symbol:\n    - If the patterns match closely enough, the threat disappears and awards points\n    - If the patterns don't match, the threat symbol glows red briefly\n- Implement a scoring system that rewards quick and accurate symbol matching.\n- Add a combo multiplier that increases when multiple threats are cleared in succession.\n- Display the current score and highest combo in an elegant calligraphic style.\n- Create visual feedback when drawing (trailing ink effect that fades away).\n- Show a \"Game Over\" screen when three threat symbols remain unmatched for too long, displaying the final score and a \"Try Again\" button.\n- The game's aesthetic should use flowing, brush-stroke inspired elements for UI components.\n\nUser Actions:\n1. Hold and drag the left mouse button to draw patterns within the squares, consuming ink while drawing.\n2. Press the spacebar to clear your current drawing if you make a mistake (can be used every 2 seconds).\nNote:\n- Your output should be implemented in JavaScript with HTML and CSS.\n- Ensure that the output has both index.js and index.html files\n"
      }
    ]
  },
  {
    "files": [
      {
        "tag": "anthropic/claude-3.5-haiku:beta_ANIMATION",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Historical Events Timeline</title><style>body{margin:0;font-family:Arial,sans-serif;background-color:#1a1a2e;color:#e0e0e0;overflow:hidden}#timeline-container{position:relative;width:100%;height:100vh;display:flex;align-items:center}#timeline{position:absolute;width:100%;height:2px;background-color:#4a4e69;bottom:40%}#particles-container{position:absolute;width:100%;height:100%;pointer-events:none}.particle{position:absolute;border-radius:50%;transition:all 0.3s ease;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:10px;opacity:0.7}.particle:hover{transform:scale(1.5);opacity:1}#controls{position:fixed;bottom:20px;left:0;width:100%;display:flex;justify-content:center;gap:20px}#density-slider{width:300px}#search-bar{padding:10px;background-color:#2a2a3e;border:none;color:#e0e0e0;border-radius:5px}.category-filter{display:flex;gap:10px;margin-top:10px}.category-btn{background-color:#4a4e69;color:#e0e0e0;border:none;padding:5px 10px;border-radius:5px;cursor:pointer}.category-btn.active{background-color:#6a6e89}</style></head><body><div id=\"timeline-container\"><div id=\"timeline\"></div><div id=\"particles-container\"></div></div><div id=\"controls\"><input id=\"density-slider\" max=\"20\" min=\"5\" type=\"range\" value=\"10\"/><input id=\"search-bar\" placeholder=\"Search events...\" type=\"text\"/><div class=\"category-filter\"><button class=\"category-btn\" data-category=\"social\">Social</button><button class=\"category-btn\" data-category=\"legislative\">Legislative</button><button class=\"category-btn\" data-category=\"cultural\">Cultural</button></div></div><script src=\"index.js\"></script><script>class HistoricalTimeline{constructor(){this.particlesContainer=document.getElementById('particles-container');this.timeline=document.getElementById('timeline');this.densitySlider=document.getElementById('density-slider');this.searchBar=document.getElementById('search-bar');this.categoryButtons=document.querySelectorAll('.category-btn');this.events=[{year:1969,title:'Moon Landing',category:'cultural',description:'First human steps on the moon'},{year:1989,title:'Fall of Berlin Wall',category:'legislative',description:'Symbol of end of Cold War'},{year:1955,title:'Rosa Parks Bus Protest',category:'social',description:'Pivotal moment in Civil Rights Movement'},{year:2001,title:'9/11 Attacks',category:'legislative',description:'Significant geopolitical event'},{year:1991,title:'World Wide Web Launched',category:'cultural',description:'Internet becomes publicly available'},{year:1948,title:'UN Declaration of Human Rights',category:'social',description:'Global human rights framework'},{year:1975,title:'Microsoft Founded',category:'cultural',description:'Beginning of personal computing era'},{year:1994,title:'Nelson Mandela Elected',category:'social',description:'End of Apartheid in South Africa'},{year:1945,title:'United Nations Established',category:'legislative',description:'International peacekeeping organization'},{year:1953,title:'DNA Structure Discovered',category:'cultural',description:'Watson and Crick breakthrough'}];this.colors={social:'#6a4c93',legislative:'#1982c4',cultural:'#8ac926'};this.setupEventListeners()}setupEventListeners(){this.densitySlider.addEventListener('input',()=>this.updateParticles());this.searchBar.addEventListener('input',()=>this.filterEvents());this.categoryButtons.forEach(btn=>btn.addEventListener('click',()=>this.toggleCategory(btn)))}updateParticles(){const eventCount=parseInt(this.densitySlider.value);this.particlesContainer.innerHTML='';const selectedEvents=this.events.sort(()=>0.5-Math.random()).slice(0,eventCount);selectedEvents.forEach(event=>this.createParticle(event))}createParticle(event){const particle=document.createElement('div');particle.classList.add('particle');particle.style.backgroundColor=this.colors[event.category];particle.style.left=`${(event.year-1940)/(2020-1940)*100}%`;particle.style.width='20px';particle.style.height='20px';particle.dataset.category=event.category;particle.dataset.year=event.year;particle.innerHTML=`<span>${event.title}</span>`;particle.addEventListener('mouseover',()=>this.showEventDetails(event));this.particlesContainer.appendChild(particle)}showEventDetails(event){const details=document.createElement('div');details.innerHTML=`<strong>${event.year}: ${event.title}</strong><p>${event.description}</p>`;details.style.position='absolute';details.style.backgroundColor='rgba(0,0,0,0.8)';details.style.color='white';details.style.padding='10px';details.style.borderRadius='5px';this.particlesContainer.appendChild(details)}filterEvents(){const searchTerm=this.searchBar.value.toLowerCase();document.querySelectorAll('.particle').forEach(particle=>{const title=particle.textContent.toLowerCase();particle.style.opacity=title.includes(searchTerm)?'1':'0.2'})}toggleCategory(btn){btn.classList.toggle('active');const activeCategories=Array.from(this.categoryButtons).filter(b=>b.classList.contains('active')).map(b=>b.dataset.category);document.querySelectorAll('.particle').forEach(particle=>{const particleCategory=particle.dataset.category;particle.style.display=activeCategories.length===0||activeCategories.includes(particleCategory)?'block':'none'})}init(){this.updateParticles()}}document.addEventListener('DOMContentLoaded',()=>{const timeline=new HistoricalTimeline();timeline.init()});</script></body></html>",
        "language": "html",
        "question": "Create an interactive timeline visualization that demonstrates historical events through an engaging particle-based display system.\n\nFeatures:\n- Display a horizontal timeline spanning across the screen with distinct time periods marked at regular intervals\n- Implement floating particles that represent historical events, with different colors representing different categories (e.g., social movements, legislative changes, cultural milestones)\n- Each particle should contain brief, clear text (maximum 10 words) describing the historical event\n- The particles should gently float up and down with a smooth animation\n- When particles are hovered over, they should expand to show more detailed information\n- Include a \"density slider\" that controls how many particles are visible at once (ranging from 5 to 20 events)\n- Implement a visual connection system where related events are connected by subtle flowing lines\n- The connection lines should animate with a flowing effect, similar to energy or data transfer\n- Add a search bar that highlights particles containing specific keywords\n- When a particle is selected, related particles should glow and their connection lines should become more prominent\n- Include a category filter system with toggleable buttons for different types of historical events\n- The particles should smoothly fade in/out when filtered\n- All text should use clear, readable fonts and high contrast colors\n\nUser Actions:\n1. Use the density slider to adjust how many historical events are visible at once:\n- Sliding left reduces the number of visible events, making it less overwhelming\n- Sliding right increases the number of visible events for a more comprehensive view\n2. Click on event particles to:\n- Center the timeline on that event\n- Highlight related events\n- Display additional information in a clear, concise format\n3. Type keywords in the search bar to:\n- Highlight relevant events in real-time as you type\n- Dim non-matching events\n- Show visual connections between matching events\nNote:\n- Your output should be implemented in JavaScript with HTML and CSS.\n- Ensure that the output has both index.js and index.html files\n"
      }
    ]
  },
  {
    "files": [
      {
        "tag": "anthropic/claude-3.5-haiku:beta_SCIENCE",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Molecular Bonding Simulator</title><style>body{margin:0;font-family:\"Arial\",sans-serif;background:#f4f4f4;display:flex;justify-content:center;align-items:center;height:100vh;overflow:hidden}#simulation-container{width:90vmin;height:90vmin;background:#ffffff;border-radius:15px;box-shadow:0 10px 30px rgba(0,0,0,0.1);position:relative;overflow:hidden}#whiteboard{width:100%;height:100%;position:absolute;background:linear-gradient(to bottom right, #f9f9f9, #f0f0f0);border-radius:15px}#particles-layer{position:absolute;width:100%;height:100%}#grid-overlay{position:absolute;width:100%;height:100%;background-image:linear-gradient(rgba(200,200,200,0.1) 1px, transparent 1px),linear-gradient(90deg, rgba(200,200,200,0.1) 1px, transparent 1px);background-size:20px 20px;opacity:0.5;pointer-events:none}#stats-panel{position:absolute;right:10px;top:10px;width:200px;background:rgba(255,255,255,0.8);border-radius:10px;padding:15px;box-shadow:0 5px 15px rgba(0,0,0,0.1)}#notes-section{position:absolute;bottom:10px;left:50%;transform:translateX(-50%);width:80%;background:rgba(255,255,255,0.9);border-radius:10px;padding:15px;text-align:center;font-size:12px}#temperature-slider{position:absolute;bottom:10px;left:10px;width:200px}#learning-mode-indicator{position:absolute;top:10px;left:10px;background:rgba(0,123,255,0.1);color:#007bff;padding:5px 10px;border-radius:20px;font-size:12px;display:none}</style></head><body><div id=\"simulation-container\"><div id=\"whiteboard\"></div><div id=\"particles-layer\"></div><div id=\"grid-overlay\"></div><div id=\"stats-panel\"><div>Bonds: <span id=\"bond-count\">0</span></div><div>Molecules: <span id=\"molecule-types\">-</span></div><div>Stability: <progress id=\"stability-meter\" max=\"100\" value=\"0\"></progress></div></div><div id=\"notes-section\">Hover over particles to learn about molecular interactions</div><input id=\"temperature-slider\" max=\"100\" min=\"0\" type=\"range\" value=\"50\"/><div id=\"learning-mode-indicator\">Learning Mode Active</div></div><script src=\"index.js\"></script><script>document.addEventListener('DOMContentLoaded', () => {\n    const container = document.getElementById('particles-layer');\n    const statsPanel = document.getElementById('stats-panel');\n    const notesSection = document.getElementById('notes-section');\n    const learningModeIndicator = document.getElementById('learning-mode-indicator');\n    const temperatureSlider = document.getElementById('temperature-slider');\n\n    class Particle {\n        constructor(type, x, y) {\n            this.type = type;\n            this.x = x;\n            this.y = y;\n            this.vx = Math.random() * 2 - 1;\n            this.vy = Math.random() * 2 - 1;\n            this.element = this.createElement();\n        }\n\n        createElement() {\n            const el = document.createElement('div');\n            el.classList.add('particle');\n            el.style.position = 'absolute';\n            el.style.width = '20px';\n            el.style.height = '20px';\n            el.style.borderRadius = '50%';\n            el.style.transition = 'transform 0.1s ease';\n\n            switch(this.type) {\n                case 'A': // Positive Blue\n                    el.style.background = 'linear-gradient(135deg, #4a90e2, #2c3e50)';\n                    break;\n                case 'B': // Negative Red\n                    el.style.background = 'linear-gradient(135deg, #e74c3c, #c0392b)';\n                    break;\n                case 'C': // Neutral Green\n                    el.style.background = 'linear-gradient(135deg, #2ecc71, #27ae60)';\n                    break;\n            }\n\n            container.appendChild(el);\n            return el;\n        }\n\n        update(learningMode) {\n            const speed = learningMode ? 0.1 : temperatureSlider.value / 100;\n            this.x += this.vx * speed;\n            this.y += this.vy * speed;\n\n            this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;\n        }\n    }\n\n    class MolecularSimulation {\n        constructor() {\n            this.particles = [];\n            this.bonds = [];\n            this.learningMode = false;\n            this.initializeParticles();\n            this.setupEventListeners();\n        }\n\n        initializeParticles() {\n            const types = ['A', 'B', 'C'];\n            for (let i = 0; i < 30; i++) {\n                const type = types[Math.floor(Math.random() * types.length)];\n                const x = Math.random() * (container.clientWidth - 20);\n                const y = Math.random() * (container.clientHeight - 20);\n                this.particles.push(new Particle(type, x, y));\n            }\n        }\n\n        setupEventListeners() {\n            document.addEventListener('keydown', (e) => {\n                if (e.code === 'Space') {\n                    e.preventDefault();\n                    this.toggleLearningMode();\n                }\n            });\n\n            container.addEventListener('wheel', (e) => {\n                e.preventDefault();\n                const scale = e.deltaY > 0 ? 0.9 : 1.1;\n                container.style.transform = `scale(${scale})`;\n            });\n        }\n\n        toggleLearningMode() {\n            this.learningMode = !this.learningMode;\n            learningModeIndicator.style.display = this.learningMode ? 'block' : 'none';\n        }\n\n        update() {\n            this.particles.forEach(p => p.update(this.learningMode));\n            this.checkBonds();\n            requestAnimationFrame(() => this.update());\n        }\n\n        checkBonds() {\n            // Simplified bonding logic\n            // In a real simulation, this would be more complex\n        }\n    }\n\n    const simulation = new MolecularSimulation();\n    simulation.update();\n});\n</script></body></html>",
        "language": "html",
        "question": "Create an interactive particle simulation that demonstrates the concept of molecular bonding through a visually engaging, classroom-inspired interface.\n\nFeatures:\n- Create a main display area styled as a modern classroom whiteboard with a clean, minimalist design.\n- Generate colorful particle entities representing different types of atoms (at least 3 types).\n- Each atom type should have a distinct appearance using gradients and subtle animations:\n* Type A: Blue particles with positive charge\n* Type B: Red particles with negative charge\n* Type C: Green particles with neutral charge\n- Implement a physics system where particles:\n* Float freely within the whiteboard bounds\n* Create visible bonds (represented as animated lines) when compatible particles come close\n* Repel when incompatible particles approach each other\n- Display a \"molecular structure\" panel on the right showing:\n* Current number of bonds formed\n* Types of molecules created\n* A stability meter that increases with more stable molecular configurations\n- Create visual feedback when bonds form or break (glowing effects and subtle animations)\n- Add a grid background that can be toggled on/off\n- Include a \"notes section\" at the bottom that updates with explanatory text based on the current molecular configuration\n- Implement a \"temperature slider\" that affects particle movement speed\n- Style all UI elements with a modern educational aesthetic using clean fonts and intuitive icons\n\nUser Actions:\n1. Click and drag particles to manually position them, allowing direct manipulation of molecular structures. The particles should maintain their physical properties while being dragged.\n2. Press the spacebar to toggle \"learning mode\" which slows down all particle movement and displays additional visual guides (attraction/repulsion forces shown as arrows, potential bond locations highlighted).\n3. Use the scroll wheel to zoom in/out of the simulation, allowing detailed observation of bonding mechanics while maintaining the physics simulation.\nNote:\n- Your output should be implemented in JavaScript with HTML and CSS.\n- Ensure that the output has both index.js and index.html files\n"
      }
    ]
  },
  {
    "files": [
      {
        "tag": "anthropic/claude-3.5-haiku:beta_GAMES",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Calligraphy Quest</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;font-family:'Georgia',serif;background-color:#f4e6d0}#gameContainer{width:100vmin;height:100vmin;margin:auto;position:relative;background:linear-gradient(45deg,rgba(210,180,140,0.2),rgba(245,222,179,0.4)),url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" opacity=\"0.1\"><line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" stroke=\"brown\" stroke-width=\"1\"/><line x1=\"100\" y1=\"0\" x2=\"0\" y2=\"100\" stroke=\"brown\" stroke-width=\"1\"/></svg>')}#gameGrid{display:grid;grid-template-columns:repeat(3,1fr);gap:10px;width:80%;height:60%;position:absolute;top:30%;left:10%;background-color:rgba(255,255,255,0.2);border-radius:15px;padding:10px}#gameGrid div{border:2px solid rgba(101,67,33,0.3);background-color:rgba(255,255,255,0.1);transition:all 0.3s ease}#inkMeter{position:absolute;top:10%;left:10%;width:80%;height:20px;background-color:rgba(0,0,0,0.1);border-radius:10px;overflow:hidden}#inkMeterFill{width:100%;height:100%;background:linear-gradient(to right,#4a2c1d,#8b4513);transform-origin:left;transition:transform 0.3s ease}#scoreDisplay{position:absolute;top:5%;right:10%;font-size:24px;color:#4a2c1d;text-shadow:1px 1px 2px rgba(0,0,0,0.2)}#comboDisplay{position:absolute;top:10%;right:10%;font-size:18px;color:#8b4513}#gameOverScreen{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.7);display:none;flex-direction:column;justify-content:center;align-items:center;color:white;text-align:center}#tryAgainButton{margin-top:20px;padding:10px 20px;background-color:#8b4513;color:white;border:none;cursor:pointer}</style></head><body><div id=\"gameContainer\"><div id=\"gameGrid\"></div><div id=\"inkMeter\"><div id=\"inkMeterFill\"></div></div><div id=\"scoreDisplay\">Score: 0</div><div id=\"comboDisplay\">Combo: 0x</div><div id=\"gameOverScreen\"><h1>Game Over</h1><p id=\"finalScore\">Final Score: 0</p><button id=\"tryAgainButton\">Try Again</button></div></div><script src=\"index.js\"></script><script>const gameContainer = document.getElementById('gameContainer');const gameGrid = document.getElementById('gameGrid');const inkMeterFill = document.getElementById('inkMeterFill');const scoreDisplay = document.getElementById('scoreDisplay');const comboDisplay = document.getElementById('comboDisplay');const gameOverScreen = document.getElementById('gameOverScreen');const finalScoreElement = document.getElementById('finalScore');const tryAgainButton = document.getElementById('tryAgainButton');class CalligraphyQuest{constructor(){this.gridSize = 9;this.score = 0;this.combo = 0;this.maxInk = 100;this.currentInk = this.maxInk;this.threats = [];this.drawing = false;this.lastClearTime = 0;this.initializeGrid();this.startGameLoop();this.setupEventListeners();}initializeGrid(){gameGrid.innerHTML = '';for(let i = 0; i < this.gridSize; i++){const cell = document.createElement('div');cell.dataset.index = i;gameGrid.appendChild(cell);}}startGameLoop(){this.spawnThreats();this.updateInk();this.checkGameState();}spawnThreats(){if(this.threats.length < 3 && Math.random() < 0.1){const emptyCell = gameGrid.querySelector('div:not([data-threat])');if(emptyCell){const threatSymbol = this.generateThreatSymbol();emptyCell.dataset.threat = threatSymbol;emptyCell.style.backgroundColor = 'rgba(0,0,0,0.2)';}}setTimeout(() => this.spawnThreats(), 2000);}generateThreatSymbol(){const symbols = ['triangle', 'circle', 'square', 'zigzag', 'cross'];return symbols[Math.floor(Math.random() * symbols.length)];}updateInk(){this.currentInk = Math.min(this.maxInk, this.currentInk + 0.5);const percentage = (this.currentInk / this.maxInk) * 100;inkMeterFill.style.transform = `scaleX(${percentage / 100})`;setTimeout(() => this.updateInk(), 50);}setupEventListeners(){gameContainer.addEventListener('mousedown', this.startDrawing.bind(this));gameContainer.addEventListener('mousemove', this.draw.bind(this));gameContainer.addEventListener('mouseup', this.stopDrawing.bind(this));document.addEventListener('keydown', this.handleKeyPress.bind(this));tryAgainButton.addEventListener('click', this.resetGame.bind(this));}startDrawing(e){if(e.target.closest('#gameGrid div')){this.drawing = true;this.currentPath = [];this.currentCell = e.target.closest('#gameGrid div');}}draw(e){if(!this.drawing || this.currentInk <= 0) return;const rect = gameGrid.getBoundingClientRect();const x = e.clientX - rect.left;const y = e.clientY - rect.top;this.currentInk -= 1;this.currentPath.push({x, y});this.renderDrawing();}stopDrawing(){if(!this.drawing) return;this.drawing = false;this.checkThreatMatch();}checkThreatMatch(){const cell = this.currentCell;const threatSymbol = cell.dataset.threat;if(threatSymbol){this.score += 100 * (this.combo + 1);this.combo++;comboDisplay.textContent = `Combo: ${this.combo}x`;scoreDisplay.textContent = `Score: ${this.score}`;delete cell.dataset.threat;cell.style.backgroundColor = 'transparent';}}checkGameState(){const unhandledThreats = gameGrid.querySelectorAll('div[data-threat]');if(unhandledThreats.length >= 3){this.endGame();}setTimeout(() => this.checkGameState(), 1000);}renderDrawing(){const ctx = this.getDrawingContext();ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);ctx.strokeStyle = 'rgba(101,67,33,0.7)';ctx.lineWidth = 3;ctx.beginPath();if(this.currentPath.length > 1){ctx.moveTo(this.currentPath[0].x, this.currentPath[0].y);this.currentPath.slice(1).forEach(point => {ctx.lineTo(point.x, point.y);});ctx.stroke();}}getDrawingContext(){let canvas = this.drawingCanvas;if(!canvas){canvas = document.createElement('canvas');canvas.width = gameGrid.clientWidth;canvas.height = gameGrid.clientHeight;canvas.style.position = 'absolute';canvas.style.top = '0';canvas.style.left = '0';canvas.style.pointerEvents = 'none';gameGrid.appendChild(canvas);this.drawingCanvas = canvas;}return canvas.getContext('2d');}handleKeyPress(e){if(e.code === 'Space' && Date.now() - this.lastClearTime > 2000){this.clearDrawing();this.lastClearTime = Date.now();e.preventDefault();}}clearDrawing(){if(this.drawingCanvas){const ctx = this.drawingCanvas.getContext('2d');ctx.clearRect(0, 0, this.drawingCanvas.width, this.drawingCanvas.height);this.currentPath = [];}}endGame(){gameOverScreen.style.display = 'flex';finalScoreElement.textContent = `Final Score: ${this.score}`;}resetGame(){this.score = 0;this.combo = 0;this.currentInk = this.maxInk;gameGrid.innerHTML = '';this.initializeGrid();gameOverScreen.style.display = 'none';scoreDisplay.textContent = 'Score: 0';comboDisplay.textContent = 'Combo: 0x';this.startGameLoop();}}new CalligraphyQuest();</script></body></html>",
        "language": "html",
        "question": "Implement a fun web game called \"Calligraphy Quest\" where players draw symbols to defend against incoming threats while managing their ink resources.\n\nFeatures:\n- Create a 2D game area with an aged parchment background texture using CSS gradients.\n- Display a brush cursor that follows the mouse movement smoothly across the screen.\n- Create a grid of 9 squares (3x3) with subtle borders, each representing a drawing zone.\n- Generate \"threat symbols\" that appear randomly in these squares, visualized as simple geometric patterns in black ink.\n- Display an ink meter at the top of the screen that depletes as the player draws.\n- The ink meter should slowly refill over time when not drawing.\n- When the player draws in a square containing a threat symbol, compare the drawn pattern with the threat symbol:\n    - If the patterns match closely enough, the threat disappears and awards points\n    - If the patterns don't match, the threat symbol glows red briefly\n- Implement a scoring system that rewards quick and accurate symbol matching.\n- Add a combo multiplier that increases when multiple threats are cleared in succession.\n- Display the current score and highest combo in an elegant calligraphic style.\n- Create visual feedback when drawing (trailing ink effect that fades away).\n- Show a \"Game Over\" screen when three threat symbols remain unmatched for too long, displaying the final score and a \"Try Again\" button.\n- The game's aesthetic should use flowing, brush-stroke inspired elements for UI components.\n\nUser Actions:\n1. Hold and drag the left mouse button to draw patterns within the squares, consuming ink while drawing.\n2. Press the spacebar to clear your current drawing if you make a mistake (can be used every 2 seconds).\nNote:\n- Your output should be implemented in JavaScript with HTML and CSS.\n- Ensure that the output has both index.js and index.html files\n"
      }
    ]
  }
]
