[
  {
    "files": [
      {
        "model": "anthropic/claude-3.5-haiku_ANIMATION",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Sound Wave Visualizer</title><style>body{margin:0;overflow:hidden;background-color:#000;display:flex;justify-content:center;align-items:center;height:100vh;font-family:Arial,sans-serif}#canvas{border-radius:50%;box-shadow:0 0 50px rgba(255,105,180,0.5)}#frequencySlider{position:absolute;bottom:20px;width:300px;z-index:10;-webkit-appearance:none;background:linear-gradient(to right, #ff1493, #8a2be2);height:10px;outline:none;opacity:0.7;transition:opacity 0.2s}#frequencySlider:hover{opacity:1}#frequencySlider::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:20px;height:20px;background:#fff;cursor:pointer;border-radius:50%}</style></head><body><canvas id=\"canvas\"></canvas><input id=\"frequencySlider\" max=\"100\" min=\"0\" type=\"range\" value=\"50\"/><script src=\"index.js\"></script><script>const canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\nconst frequencySlider = document.getElementById('frequencySlider');\n\ncanvas.width = window.innerHeight * 0.8;\ncanvas.height = window.innerHeight * 0.8;\n\nclass SoundWaveVisualizer {\n    constructor() {\n        this.centerX = canvas.width / 2;\n        this.centerY = canvas.height / 2;\n        this.baseRadius = canvas.width * 0.3;\n        this.points = 100;\n        this.angle = 0;\n        this.baseFrequency = 50;\n        this.particles = [];\n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        let isDragging = false;\n        let lastMouseX = 0, lastMouseY = 0;\n\n        canvas.addEventListener('mousedown', (e) => {\n            isDragging = true;\n            lastMouseX = e.clientX - canvas.offsetLeft;\n            lastMouseY = e.clientY - canvas.offsetTop;\n        });\n\n        canvas.addEventListener('mousemove', (e) => {\n            if (isDragging) {\n                const mouseX = e.clientX - canvas.offsetLeft;\n                const mouseY = e.clientY - canvas.offsetTop;\n                this.distortWaveform(mouseX, mouseY);\n            }\n        });\n\n        canvas.addEventListener('mouseup', () => {\n            isDragging = false;\n        });\n\n        frequencySlider.addEventListener('input', (e) => {\n            this.baseFrequency = e.target.value;\n        });\n    }\n\n    createGradient() {\n        const gradient = ctx.createRadialGradient(\n            this.centerX, this.centerY, 0,\n            this.centerX, this.centerY, this.baseRadius * 2\n        );\n        gradient.addColorStop(0, 'rgba(255, 20, 147, 0.7)');\n        gradient.addColorStop(0.5, 'rgba(138, 43, 226, 0.5)');\n        gradient.addColorStop(1, 'rgba(0, 191, 255, 0.3)');\n        return gradient;\n    }\n\n    distortWaveform(mouseX, mouseY) {\n        const dx = mouseX - this.centerX;\n        const dy = mouseY - this.centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        this.points = this.points.map((point, index) => {\n            const distanceToMouse = Math.abs(point.originalAngle - Math.atan2(dy, dx));\n            const influence = Math.max(0, 1 - distanceToMouse / Math.PI);\n            point.radiusOffset += influence * 50 * Math.sin(Date.now() * 0.01);\n            return point;\n        });\n    }\n\n    generatePoints() {\n        this.points = Array.from({length: 100}, (_, index) => ({\n            angle: (index / 100) * Math.PI * 2,\n            originalAngle: (index / 100) * Math.PI * 2,\n            radiusOffset: 0\n        }));\n    }\n\n    drawFrequencySpectrum() {\n        ctx.save();\n        ctx.translate(this.centerX, this.centerY);\n        ctx.rotate(this.angle);\n\n        for (let i = 0; i < 16; i++) {\n            const barHeight = Math.sin(Date.now() * 0.01 + i) * 50 + 50;\n            ctx.beginPath();\n            ctx.arc(0, 0, this.baseRadius + barHeight, i * (Math.PI * 2 / 16), (i + 1) * (Math.PI * 2 / 16));\n            ctx.strokeStyle = `rgba(255, 20, 147, ${0.1 + i * 0.05})`;\n            ctx.lineWidth = 5;\n            ctx.stroke();\n        }\n\n        ctx.restore();\n    }\n\n    drawWaveform() {\n        ctx.save();\n        ctx.translate(this.centerX, this.centerY);\n\n        const gradient = this.createGradient();\n        ctx.beginPath();\n\n        this.points.forEach((point, index) => {\n            const radius = this.baseRadius + \n                Math.sin(point.angle + Date.now() * 0.001) * 20 + \n                point.radiusOffset * Math.sin(this.baseFrequency * 0.1);\n\n            const x = radius * Math.cos(point.angle);\n            const y = radius * Math.sin(point.angle);\n\n            if (index === 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n        });\n\n        ctx.closePath();\n        ctx.fillStyle = gradient;\n        ctx.fill();\n        ctx.shadowBlur = 20;\n        ctx.shadowColor = 'rgba(255, 20, 147, 0.5)';\n\n        ctx.restore();\n    }\n\n    animate() {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.angle += 0.005;\n        this.points.forEach(point => point.radiusOffset *= 0.95);\n        this.drawFrequencySpectrum();\n        this.drawWaveform();\n        requestAnimationFrame(() => this.animate());\n    }\n\n    start() {\n        this.generatePoints();\n        this.animate();\n    }\n}\n\nconst visualizer = new SoundWaveVisualizer();\nvisualizer.start();\n</script></body></html>",
        "language": "html"
      }
    ]
  },
  {
    "files": [
      {
        "model": "anthropic/claude-3.5-haiku_SCIENCE",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Industrial Fluid Dynamics Simulator</title><style>body{margin:0;overflow:hidden;background:linear-gradient(45deg,#1a2b3c,#334455);font-family:Arial,sans-serif;display:flex;justify-content:center;align-items:center;height:100vh;color:#e0e0e0}#simulator{width:90vmin;height:90vmin;background:rgba(30,40,50,0.7);border-radius:15px;position:relative;box-shadow:0 10px 30px rgba(0,0,0,0.5);display:flex;flex-direction:column}#pipes{position:absolute;width:100%;height:100%;pointer-events:none}.pipe{position:absolute;background:linear-gradient(90deg,#4a5568,#2d3748);border:2px solid #718096}#valves{display:flex;justify-content:space-around;padding:10px}#valves button{background:#718096;border:none;color:white;padding:10px;border-radius:5px;cursor:pointer}#dashboard{position:absolute;bottom:10px;left:10px;background:rgba(20,30,40,0.8);padding:10px;border-radius:10px}#efficiency-report{position:absolute;bottom:10px;right:10px;background:rgba(20,30,40,0.8);padding:10px;border-radius:10px}#pressure-gauge{width:100px;height:100px;border-radius:50%;background:conic-gradient(#48bb78 0%, #f56565 100%);position:relative}#pressure-gauge::after{content:'';position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:80%;height:80%;background:#2d3748;border-radius:50%}</style></head><body><div id=\"simulator\"><div id=\"pipes\"></div><div id=\"valves\"><button id=\"valve-a\">Valve A</button><button id=\"valve-b\">Valve B</button><button id=\"valve-c\">Valve C</button></div><div id=\"dashboard\">Flow Rates:<br/>A: <span id=\"flow-a\">0%</span><br/>B: <span id=\"flow-b\">0%</span><br/>C: <span id=\"flow-c\">0%</span><br/>Mixing Ratio: <span id=\"mixing-ratio\">0%</span><br/>Efficiency: <span id=\"efficiency\">0%</span></div><div id=\"pressure-gauge\"></div><button id=\"efficiency-report\">Production Report</button></div><script src=\"index.js\"></script><script>document.addEventListener('DOMContentLoaded', () => {\n    const simulator = document.getElementById('simulator');\n    const pipesContainer = document.getElementById('pipes');\n    const valveA = document.getElementById('valve-a');\n    const valveB = document.getElementById('valve-b');\n    const valveC = document.getElementById('valve-c');\n    const flowADisplay = document.getElementById('flow-a');\n    const flowBDisplay = document.getElementById('flow-b');\n    const flowCDisplay = document.getElementById('flow-c');\n    const mixingRatioDisplay = document.getElementById('mixing-ratio');\n    const efficiencyDisplay = document.getElementById('efficiency');\n\n    class ParticleSystem {\n        constructor() {\n            this.particles = [];\n            this.valveStates = { a: 0, b: 0, c: 0 };\n            this.turboMode = false;\n        }\n\n        createParticle(type, x, y) {\n            const particle = {\n                type,\n                x,\n                y,\n                vx: Math.random() * 2 - 1,\n                vy: Math.random() * 2 - 1,\n                radius: 5\n            };\n            this.particles.push(particle);\n        }\n\n        updateParticles() {\n            this.particles.forEach(p => {\n                p.x += p.vx * (this.turboMode ? 2 : 1);\n                p.y += p.vy * (this.turboMode ? 2 : 1);\n\n                // Boundary and pipe collision logic\n                if (p.x < 0 || p.x > simulator.clientWidth) p.vx *= -1;\n                if (p.y < 0 || p.y > simulator.clientHeight) p.vy *= -1;\n            });\n        }\n\n        renderParticles(ctx) {\n            this.particles.forEach(p => {\n                ctx.beginPath();\n                ctx.fillStyle = p.type === 'A' ? '#f56565' : \n                               p.type === 'B' ? '#4299e1' : '#ecc94b';\n                ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);\n                ctx.fill();\n            });\n        }\n    }\n\n    const particleSystem = new ParticleSystem();\n\n    function setupValveControls() {\n        [valveA, valveB, valveC].forEach((valve, index) => {\n            const types = ['A', 'B', 'C'];\n            valve.addEventListener('click', () => {\n                const currentState = particleSystem.valveStates[types[index].toLowerCase()];\n                const newState = currentState === 100 ? 0 : currentState + 25;\n                particleSystem.valveStates[types[index].toLowerCase()] = newState;\n                valve.textContent = `Valve ${types[index]}: ${newState}%`;\n\n                // Spawn particles based on valve state\n                for (let i = 0; i < newState / 10; i++) {\n                    particleSystem.createParticle(types[index], \n                        simulator.clientWidth * (index + 1) / 4, \n                        50);\n                }\n            });\n        });\n    }\n\n    function setupTurboMode() {\n        document.addEventListener('keydown', (e) => {\n            if (e.code === 'Space') {\n                e.preventDefault();\n                particleSystem.turboMode = !particleSystem.turboMode;\n            }\n        });\n    }\n\n    function animate() {\n        const ctx = document.createElement('canvas').getContext('2d');\n        ctx.canvas.width = simulator.clientWidth;\n        ctx.canvas.height = simulator.clientHeight;\n        pipesContainer.innerHTML = '';\n        pipesContainer.appendChild(ctx.canvas);\n\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        particleSystem.updateParticles();\n        particleSystem.renderParticles(ctx);\n\n        requestAnimationFrame(animate);\n    }\n\n    setupValveControls();\n    setupTurboMode();\n    animate();\n});\n</script></body></html>",
        "language": "html"
      }
    ]
  },
  {
    "files": [
      {
        "model": "anthropic/claude-3.5-haiku_GAMES",
        "filename": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\"><head><meta charset=\"utf-8\"/><title>Document Chase</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;background:#1a1a1a;font-family:monospace}#gameContainer{position:relative;width:100vmin;height:100vmin;margin:auto;background:#2c2c2c;overflow:hidden}#gameCanvas{position:absolute;top:0;left:0;width:100%;height:100%}#hud{position:absolute;top:10px;left:10px;right:10px;display:flex;justify-content:space-between;color:#e0e0e0;font-size:16px}#gameOver{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:rgba(0,0,0,0.8);color:#fff;padding:20px;text-align:center;display:none;flex-direction:column;border:2px solid #ff4500}#tryAgain{margin-top:15px;padding:10px;background:#ff4500;color:white;border:none;cursor:pointer}</style></head><body><div id=\"gameContainer\"><canvas id=\"gameCanvas\"></canvas><div id=\"hud\"><span id=\"score\">Documents: 0</span><span id=\"timer\">Time: 90s</span><span id=\"stealthStatus\">Stealth: Ready</span></div><div id=\"gameOver\"><h2>Mission Failed</h2><p>Documents Collected: <span id=\"finalScore\">0</span></p><button id=\"tryAgain\">Try Again</button></div></div><script src=\"index.js\"></script><script>const canvas = document.getElementById('gameCanvas');const ctx = canvas.getContext('2d');const scoreElement = document.getElementById('score');const timerElement = document.getElementById('timer');const stealthStatusElement = document.getElementById('stealthStatus');const gameOverScreen = document.getElementById('gameOver');const finalScoreElement = document.getElementById('finalScore');const tryAgainButton = document.getElementById('tryAgain');canvas.width = 800;canvas.height = 800;const CANVAS_WIDTH = 800, CANVAS_HEIGHT = 800;const PLAYER_SIZE = 20, OFFICIAL_SIZE = 30, DOCUMENT_SIZE = 15;const STEALTH_DURATION = 10000, STEALTH_COOLDOWN = 20000;let player = {x: 400, y: 400, speed: 3, trail: []};let documents = [];let officials = [];let suspicionLevel = 0;let score = 0;let timeRemaining = 90;let gameOver = false;let stealthActive = false;let stealthTimer = 0;let stealthCooldownTimer = 0;function createOfficial(x, y) {return {x, y, angle: Math.random() * Math.PI * 2, detectionCone: Math.PI / 3};}function createDocument(x, y) {return {x, y, collected: false, pulseTimer: 0};}function initGame() {player.x = 400;player.y = 400;documents = [];officials = [];score = 0;timeRemaining = 90;suspicionLevel = 0;stealthActive = false;stealthTimer = 0;stealthCooldownTimer = 0;for (let i = 0; i < 5; i++) {documents.push(createDocument(Math.random() * CANVAS_WIDTH, Math.random() * CANVAS_HEIGHT));}for (let i = 0; i < 3; i++) {officials.push(createOfficial(Math.random() * CANVAS_WIDTH, Math.random() * CANVAS_HEIGHT));}}function drawPlayer() {ctx.fillStyle = 'rgba(200, 200, 255, 0.7)';player.trail.forEach((t, i) => {ctx.globalAlpha = 1 - i * 0.2;ctx.fillRect(t.x, t.y, PLAYER_SIZE, PLAYER_SIZE);});ctx.globalAlpha = 1;ctx.fillStyle = 'rgba(100, 100, 255, 1)';ctx.fillRect(player.x, player.y, PLAYER_SIZE, PLAYER_SIZE);}function drawDocuments() {documents.filter(d => !d.collected).forEach(doc => {doc.pulseTimer += 0.1;const pulse = Math.sin(doc.pulseTimer) * 10 + 15;ctx.shadowBlur = pulse;ctx.shadowColor = 'rgba(255, 255, 0, 0.7)';ctx.fillStyle = 'rgba(255, 255, 100, 0.7)';ctx.fillRect(doc.x, doc.y, DOCUMENT_SIZE, DOCUMENT_SIZE);ctx.shadowBlur = 0;});}function drawOfficials() {officials.forEach(official => {ctx.fillStyle = 'rgba(100, 0, 0, 0.7)';ctx.beginPath();ctx.moveTo(official.x, official.y);ctx.arc(official.x, official.y, OFFICIAL_SIZE, official.angle - official.detectionCone/2, official.angle + official.detectionCone/2);ctx.closePath();ctx.fill();});}function updateOfficials() {officials.forEach(official => {official.x += Math.cos(official.angle) * 2;official.y += Math.sin(official.angle) * 2;if (official.x < 0 || official.x > CANVAS_WIDTH) official.angle = Math.PI - official.angle;if (official.y < 0 || official.y > CANVAS_HEIGHT) official.angle *= -1;});}function checkCollisions() {documents.forEach(doc => {if (!doc.collected && Math.abs(player.x - doc.x) < PLAYER_SIZE && Math.abs(player.y - doc.y) < PLAYER_SIZE) {doc.collected = true;score++;}}); officials.forEach(official => {const inCone = isInDetectionCone(official, player);if (inCone && !stealthActive) {suspicionLevel += 0.5;if (suspicionLevel >= 100) endGame();}});}function isInDetectionCone(official, target) {const dx = target.x - official.x;const dy = target.y - official.y;const distance = Math.sqrt(dx * dx + dy * dy);const angle = Math.atan2(dy, dx);const angleDiff = Math.abs(angle - official.angle);return distance < 200 && angleDiff < official.detectionCone/2;}function gameLoop() {if (gameOver) return;ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);ctx.fillStyle = '#2c2c2c';ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);updateOfficials();checkCollisions();drawOfficials();drawDocuments();player.trail.unshift({x: player.x, y: player.y});if (player.trail.length > 5) player.trail.pop();drawPlayer();updateHUD();requestAnimationFrame(gameLoop);}function updateHUD() {scoreElement.textContent = `Documents: ${score}`;timerElement.textContent = `Time: ${timeRemaining}s`;stealthStatusElement.textContent = stealthActive ? 'Stealth: Active' : (stealthCooldownTimer > 0 ? 'Stealth: Cooling' : 'Stealth: Ready');}function endGame() {gameOver = true;finalScoreElement.textContent = score;gameOverScreen.style.display = 'flex';}const keys = {};window.addEventListener('keydown', (e) => {if (['w', 'a', 's', 'd', ' '].includes(e.key.toLowerCase())) {e.preventDefault();keys[e.key.toLowerCase()] = true;}});window.addEventListener('keyup', (e) => {if (['w', 'a', 's', 'd', ' '].includes(e.key.toLowerCase())) {e.preventDefault();keys[e.key.toLowerCase()] = false;}});setInterval(() => {if (!gameOver) {const speed = stealthActive ? 1.5 : 3;if (keys.w) player.y -= speed;if (keys.s) player.y += speed;if (keys.a) player.x -= speed;if (keys.d) player.x += speed;player.x = Math.max(0, Math.min(CANVAS_WIDTH - PLAYER_SIZE, player.x));player.y = Math.max(0, Math.min(CANVAS_HEIGHT - PLAYER_SIZE, player.y));if (keys[' '] && stealthCooldownTimer <= 0 && !stealthActive) {stealthActive = true;stealthTimer = STEALTH_DURATION;}if (stealthActive) {stealthTimer -= 1000;if (stealthTimer <= 0) {stealthActive = false;stealthCooldownTimer = STEALTH_COOLDOWN;}}if (stealthCooldownTimer > 0) {stealthCooldownTimer -= 1000;}timeRemaining--;if (timeRemaining <= 0) endGame();}}, 1000);tryAgainButton.addEventListener('click', () => {gameOverScreen.style.display = 'none';gameOver = false;initGame();gameLoop();});initGame();gameLoop();</script></body></html>",
        "language": "html"
      }
    ]
  }
]
